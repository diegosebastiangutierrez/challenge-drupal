<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_help().
 */
function custom_spotify_app_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.custom_spotify_app':
      return '<p>' . t('This module integrates with the Spotify API to display artist information on a custom block and a page.') . '</p>';
      break;
  }
}

/**
 * Implements hook_entity_bundle_create().
 */
function custom_spotify_app_entity_bundle_create(EntityTypeInterface $entity_type, $bundle_name, array $bundle) {
  // Set the automatic slug for artists.
  if ($entity_type->id() === 'node' && $bundle_name === 'artist') {
    $field_definition = $entity_type->getFieldDefinitions()['_title'];
    $field_definition->setSetting('generate_auto_label', TRUE);
    $field_definition->setSetting('auto_label_type', 'auto');
    $field_definition->save();
  }
  // Set the automatic slug for albums.
  if ($entity_type->id() === 'node' && $bundle_name === 'album') {
    $field_definition = $entity_type->getFieldDefinitions()['_title'];
    $field_definition->setSetting('generate_auto_label', TRUE);
    $field_definition->setSetting('auto_label_type', 'auto');
    $field_definition->save();
  }
  // Set the automatic slug for songs.
  if ($entity_type->id() === 'node' && $bundle_name === 'song') {
    $field_definition = $entity_type->getFieldDefinitions()['_title'];
    $field_definition->setSetting('generate_auto_label', TRUE);
    $field_definition->setSetting('auto_label_type', 'auto');
    $field_definition->save();
  }
}

/**
 * Implements hook_install
 */
function custom_spotify_app_install() {
  $theme_list = [
    'olivero',
    'claro',
  ];

  // Install themes.
  \Drupal::service('theme_installer')->install($theme_list);

  // Uninstall themes.
  \Drupal::service('theme_installer')->uninstall(['seven']);

  // Get system theme editable configs.
  $system_theme = \Drupal::configFactory()->getEditable('system.theme');

  // Set default and admin themes.
  $system_theme
    ->set('default', $theme_list[0])
    ->set('admin', $theme_list[1])
    ->save();
}

