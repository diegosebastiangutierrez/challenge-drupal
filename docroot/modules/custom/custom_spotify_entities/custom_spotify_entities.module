<?php

/**
 * @file
 * Provides an artist entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\custom_spotify_entities\Entity\Artist;
use Drupal\custom_spotify_entities\Entity\Album;
use Drupal\custom_spotify_entities\Entity\Song;
use Drupal\user\UserInterface;


/**
 * Prepares variables for artist templates.
 *
 * Default template: artist.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the artist information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_artist(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_album(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_song(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function custom_spotify_entities_user_cancel($edit, UserInterface $account, $method) {

  $entities = ['artist', 'album', 'song'];

  foreach($entities as $entity) {
    switch ($method) {
      case 'user_cancel_block_unpublish':
        // Unpublish artists.
        $storage = \Drupal::entityTypeManager()->getStorage($entity);
        $ent_ids = $storage->getQuery()
          ->condition('uid', $account->id())
          ->condition('status', 1)
          ->execute();
        foreach ($storage->loadMultiple($ent_ids) as $ent) {
          $ent->set('status', FALSE);
          $ent->save();
        }
        break;

      case 'user_cancel_reassign':
        // Anonymize artists.
        $storage = \Drupal::entityTypeManager()->getStorage($entity);
        $ent_ids = $storage->getQuery()
          ->condition('uid', $account->id())
          ->execute();
        foreach ($storage->loadMultiple($ent_ids) as $ent) {
          $ent->setOwnerId(0);
          $ent->save();
        }
        break;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function custom_spotify_entities_user_predelete(UserInterface $account) {
  // Delete artists.
  $storage = \Drupal::entityTypeManager()->getStorage('artist');
  $artist_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $artists = $storage->loadMultiple($artist_ids);
  $storage->delete($artists);

  // Delete albums.
  $storage = \Drupal::entityTypeManager()->getStorage('album');
  $album_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $albums = $storage->loadMultiple($album_ids);
  $storage->delete($albums);

  // Delete songs.
  $storage = \Drupal::entityTypeManager()->getStorage('song');
  $song_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $songs = $storage->loadMultiple($song_ids);
  $storage->delete($songs);
}

/**
 * Implements hook_theme().
 */
function custom_spotify_entities_theme() {
  return [
    'song' => [
      'render element' => 'elements',
    ],
    'field__preview_url' => [
      'base hook' => 'field',
      'template' => 'field--preview-url',
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_install().
 */
function custom_spotify_entities_install() {

  $theme_list = ['spotify_theme','claro',];

  // Install themes.
  \Drupal::service('theme_installer')->install($theme_list);

  // Get system theme editable configs.
  $config = \Drupal::configFactory()->getEditable('system.theme');

  // Set default and admin themes.
  $config
    ->set('default', 'spotify_theme')
    ->set('admin', 'claro')
    ->save();

// Load the configuration object for the performance settings.
  $config = \Drupal::configFactory()->getEditable('system.performance');

  // Set the configuration values.
  $config->set('cache.page.max_age', 0)
    ->set('css.preprocess', false)
    ->set('css.gzip', false)
    ->set('js.preprocess', false)
    ->set('js.gzip', false)
    ->save();

  // Set default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'olivero')
    ->save();

  // Set default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'spotify_theme')
    ->save();

  // Set admin theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save();

  // Load the configuration object for the theme settings.
  $config = \Drupal::configFactory()->getEditable('olivero.settings');

  // Set the configuration values.
  $config->set('features.node_user_picture', 1)
    ->set('features.comment_user_picture', 1)
    ->set('features.comment_user_verification', 1)
    ->set('features.favicon', 1)
    ->set('logo.use_default', 0)
    ->set('logo.path', 'public://Spotify_Logo_RGB_White.png')
    ->set('favicon.use_default', 1)
    ->set('mobile_menu_all_widths', 0)
    ->set('site_branding_bg_color', 'default')
    ->save();

  $config = \Drupal::configFactory()->getEditable('spotify_theme.settings');

  // Set the configuration values.
  $config->set('features.node_user_picture', 1)
    ->set('features.comment_user_picture', 1)
    ->set('features.comment_user_verification', 1)
    ->set('features.favicon', 1)
    ->set('logo.use_default', 0)
    ->set('logo.path', 'public://Spotify_Logo_RGB_White.png')
    ->set('favicon.use_default', 1)
    ->set('mobile_menu_all_widths', 0)
    ->set('site_branding_bg_color', 'default')
    ->save();

  $config = \Drupal::configFactory()->getEditable('user.role.anonymous');
  $permissions = $config->get('permissions');

  // Add permissions to access and view content.
  $permissions[] = 'view album';
  $permissions[] = 'view artist';
  $permissions[] = 'view song';
  $permissions[] = 'search content';

  // Update the anonymous user role configuration with the new permissions.
  $config->set('permissions', $permissions)->save();


}

/**
 * Implements hook_uninstall().
 */
function custom_spotify_entities_uninstall() {

// Load the configuration object for the performance settings.
  $config = \Drupal::configFactory()->getEditable('system.performance');

  // Set the configuration values.
  $config->set('cache.page.max_age', 0)
    ->set('css.preprocess', false)
    ->set('css.gzip', false)
    ->set('js.preprocess', false)
    ->set('js.gzip', false)
    ->save();

  // Set default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'olivero')
    ->save();

  // Set default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'spotify_theme')
    ->save();

  // Set admin theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('admin', 'claro')
    ->save();

  // Load the configuration object for the theme settings.
  $config = \Drupal::configFactory()->getEditable('olivero.settings');

  // Set the configuration values.
  $config->set('features.node_user_picture', 1)
    ->set('features.comment_user_picture', 1)
    ->set('features.comment_user_verification', 1)
    ->set('features.favicon', 1)
    ->set('logo.use_default', 0)
    ->set('logo.path', 'public://Spotify_Logo_RGB_White.png')
    ->set('favicon.use_default', 1)
    ->set('mobile_menu_all_widths', 0)
    ->set('site_branding_bg_color', 'default')
    ->save();

  $config = \Drupal::configFactory()->getEditable('spotify_theme.settings');

  // Set the configuration values.
  $config->set('features.node_user_picture', 1)
    ->set('features.comment_user_picture', 1)
    ->set('features.comment_user_verification', 1)
    ->set('features.favicon', 1)
    ->set('logo.use_default', 0)
    ->set('logo.path', 'public://Spotify_Logo_RGB_White.png')
    ->set('favicon.use_default', 1)
    ->set('mobile_menu_all_widths', 0)
    ->set('site_branding_bg_color', 'default')
    ->save();

}
